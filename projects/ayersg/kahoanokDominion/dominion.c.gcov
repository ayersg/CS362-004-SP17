        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2:
        -:    3:Kenon Kahoano's dominion.c refactored functions 
        -:    4:
        -:    5:******************************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "rngs.h"
        -:   10:#include <stdio.h>
        -:   11:#include <math.h>
        -:   12:#include <stdlib.h>
        -:   13:
function compare called 12656 returned 100% blocks executed 85%
        -:   14:int compare(const void* a, const void* b) {
    12656:   15:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   16:    return 1;
    12656:   17:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
     4520:   18:    return -1;
     8136:   19:  return 0;
    12656:   20:}
        -:   21:
function newGame called 0 returned 0% blocks executed 0%
        -:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
function initializeGame called 227 returned 100% blocks executed 93%
        -:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
      227:   50:  SelectStream(1);
      227:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
      454:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
      227:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
     4994:   63:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:    {
    49940:   65:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   66:        {
    43130:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
    22700:   71:        }
     2270:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
      227:   79:  if (numPlayers == 2)
branch  0 taken 1%
branch  1 taken 99%
        -:   80:    {
        2:   81:      state->supplyCount[curse] = 10;
        2:   82:    }
      225:   83:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 20;
    #####:   86:    }
        -:   87:  else
        -:   88:    {
      225:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
      227:   93:  if (numPlayers == 2)
branch  0 taken 1%
branch  1 taken 99%
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 8;
        2:   96:      state->supplyCount[duchy] = 8;
        2:   97:      state->supplyCount[province] = 8;
        2:   98:    }
        -:   99:  else
        -:  100:    {
      225:  101:      state->supplyCount[estate] = 12;
      225:  102:      state->supplyCount[duchy] = 12;
      225:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
      227:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      227:  108:  state->supplyCount[silver] = 40;
      227:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
     9534:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  113:    {
    74910:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  115:	{
    35185:  116:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
     4320:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  120:		{
      440:  121:		  if (numPlayers == 2){ 
branch  0 taken 0%
branch  1 taken 100%
    #####:  122:		    state->supplyCount[i] = 8; 
    #####:  123:		  }
      440:  124:		  else{ state->supplyCount[i] = 12; }
      440:  125:		}
        -:  126:	      else
        -:  127:		{
     1830:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
     2270:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
    32915:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
    32915:  136:	}
        -:  137:
     4540:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     2262:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  145:    {
      904:  146:      state->deckCount[i] = 0;
     7232:  147:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  148:	{
     2712:  149:	  state->deck[i][j] = estate;
     2712:  150:	  state->deckCount[i]++;
     2712:  151:	}
    14464:  152:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  153:	{
     6328:  154:	  state->deck[i][j] = copper;
     6328:  155:	  state->deckCount[i]++;		
     6328:  156:	}
      904:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
     2262:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  161:    {
      904:  162:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
      904:  166:    }
        -:  167:
        -:  168:  //draw player hands
     2262:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  170:    {  
        -:  171:      //initialize hand size to zero
      904:  172:      state->handCount[i] = 0;
      904:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
      904:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    12712:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  183:    {
     6129:  184:      state->embargoTokens[i] = 0;
     6129:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
      227:  188:  state->outpostPlayed = 0;
      227:  189:  state->phase = 0;
      227:  190:  state->numActions = 1;
      227:  191:  state->numBuys = 1;
      227:  192:  state->playedCardCount = 0;
      227:  193:  state->whoseTurn = 0;
      227:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     2724:  198:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
     1135:  199:    drawCard(state->whoseTurn, state);
     1135:  200:  }
        -:  201:
      227:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
      227:  204:  return 0;
      227:  205:}
        -:  206:
function shuffle called 904 returned 100% blocks executed 93%
        -:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
      904:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
      904:  215:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  216:    return -1;
      904:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    19888:  220:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     9040:  221:    card = floor(Random() * state->deckCount[player]);
     9040:  222:    newDeck[newDeckPos] = state->deck[player][card];
     9040:  223:    newDeckPos++;
    62830:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
    22375:  225:      state->deck[player][i] = state->deck[player][i+1];
    22375:  226:    }
     9040:  227:    state->deckCount[player]--;
        -:  228:  }
    19888:  229:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     9040:  230:    state->deck[player][i] = newDeck[i];
     9040:  231:    state->deckCount[player]++;
     9040:  232:  }
        -:  233:
      904:  234:  return 0;
      904:  235:}
        -:  236:
function playCard called 0 returned 0% blocks executed 0%
        -:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
    #####:  276:}
        -:  277:
function buyCard called 0 returned 0% blocks executed 0%
        -:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
    #####:  315:}
        -:  316:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
function handCard called 0 returned 0% blocks executed 0%
        -:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
function whoseTurn called 218 returned 100% blocks executed 100%
        -:  352:int whoseTurn(struct gameState *state) {
      218:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
function endTurn called 0 returned 0% blocks executed 0%
        -:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
function isGameOver called 2 returned 100% blocks executed 30%
        -:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
        2:  401:  if (state->supplyCount[province] == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:  402:    {
        2:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  411:	{
    #####:  412:	  j++;
    #####:  413:	}
    #####:  414:    }
    #####:  415:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        2:  421:}
        -:  422:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
function getWinners called 0 returned 0% blocks executed 0%
        -:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  474:	{
    #####:  475:	  players[i] = -9999;
    #####:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
    #####:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  488:	{
    #####:  489:	  j = i;
    #####:  490:	}
    #####:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  499:	{
    #####:  500:	  players[i]++;
    #####:  501:	}
    #####:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  509:	{
    #####:  510:	  j = i;
    #####:  511:	}
    #####:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  519:	{
    #####:  520:	  players[i] = 1;
    #####:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
    #####:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
function drawCard called 1148 returned 100% blocks executed 41%
        -:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     1148:  534:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
    #####:  539:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  540:      state->deck[player][i] = state->discard[player][i];
    #####:  541:      state->discard[player][i] = -1;
    #####:  542:    }
        -:  543:
    #####:  544:    state->deckCount[player] = state->discardCount[player];
    #####:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
    #####:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
    #####:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
    #####:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
    #####:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  566:      return -1;
        -:  567:
    #####:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:    state->deckCount[player]--;
    #####:  570:    state->handCount[player]++;//Increment hand count
    #####:  571:  }
        -:  572:
        -:  573:  else{
     1148:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     1148:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1148:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1148:  582:    state->deckCount[player]--;
     1148:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     1148:  586:  return 0;
     1148:  587:}
        -:  588:
function getCost called 4 returned 100% blocks executed 22%
        -:  589:int getCost(int cardNumber)
        -:  590:{
        4:  591:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 25%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 25%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 25%
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
        1:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
        1:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
        1:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
        1:  649:  return -1;
        4:  650:}
        -:  651:
function cardEffect called 13 returned 100% blocks executed 6%
        -:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
       13:  659:  int currentPlayer = whoseTurn(state);
       13:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
       13:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
       13:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
       13:  666:  int z = 0;// this is the counter for the temp hand
       13:  667:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  668:    nextPlayer = 0;
    #####:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
       13:  673:  switch( card ) 
branch  0 taken 15%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 8%
branch  7 taken 15%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 62%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  674:    {
        -:  675:    case adventurer:
        -:  676:      /*while(drawntreasure<2){
        -:  677:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  678:	  shuffle(currentPlayer, state);
        -:  679:	}
        -:  680:	drawCard(currentPlayer, state);
        -:  681:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  682:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  683:	  drawntreasure++;
        -:  684:	else{
        -:  685:	  temphand[z]=cardDrawn;
        -:  686:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  687:	  z++;
        -:  688:	}
        -:  689:      }
        -:  690:      while(z-1>=0){
        -:  691:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  692:	z=z-1;
        -:  693:      }*/
        2:  694:        playAdventurer(state);
        2:  695:        return 0;
        -:  696:			
        -:  697:    case council_room:
        -:  698:      /*//+4 Cards
        -:  699:      for (i = 0; i < 4; i++)
        -:  700:	{
        -:  701:	  drawCard(currentPlayer, state);
        -:  702:	}
        -:  703:			
        -:  704:      //+1 Buy
        -:  705:      state->numBuys++;
        -:  706:			
        -:  707:      //Each other player draws a card
        -:  708:      for (i = 0; i < state->numPlayers; i++)
        -:  709:	{
        -:  710:	  if ( i != currentPlayer )
        -:  711:	    {
        -:  712:	      drawCard(i, state);
        -:  713:	    }
        -:  714:	}
        -:  715:			
        -:  716:      //put played card in played card pile
        -:  717:      discardCard(handPos, currentPlayer, state, 0);
        -:  718:	*/
    #####:  719:        playCouncil_Room(state, handPos);
    #####:  720:        return 0;
        -:  721:			
        -:  722:    case feast:
        -:  723:      /*//gain card with cost up to 5
        -:  724:      //Backup hand
        -:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  726:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  727:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  728:      }
        -:  729:      //Backup hand
        -:  730:
        -:  731:      //Update Coins for Buy
        -:  732:      updateCoins(currentPlayer, state, 5);
        -:  733:      x = 1;//Condition to loop on
        -:  734:      while( x == 1) {//Buy one card
        -:  735:	if (supplyCount(choice1, state) <= 0){
        -:  736:	  if (DEBUG)
        -:  737:	    printf("None of that card left, sorry!\n");
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  741:	  }
        -:  742:	}
        -:  743:	else if (state->coins < getCost(choice1)){
        -:  744:	  printf("That card is too expensive!\n");
        -:  745:
        -:  746:	  if (DEBUG){
        -:  747:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  748:	  }
        -:  749:	}
        -:  750:	else{
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  754:	  }
        -:  755:
        -:  756:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  757:	  x = 0;//No more buying cards
        -:  758:
        -:  759:	  if (DEBUG){
        -:  760:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  761:	  }
        -:  762:
        -:  763:	}
        -:  764:      }     
        -:  765:
        -:  766:      //Reset Hand
        -:  767:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  768:	state->hand[currentPlayer][i] = temphand[i];
        -:  769:	temphand[i] = -1;
        -:  770:      }
        -:  771:      //Reset Hand
        -:  772:      */
    #####:  773:        playFeast(state, choice1);
    #####:  774:        return 0;
        -:  775:			
        -:  776:    case gardens:
    #####:  777:      return -1;
        -:  778:			
        -:  779:    case mine:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:		
    #####:  787:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 2, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
    #####:  810:	}
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case remodel:
    #####:  815:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  816:
    #####:  817:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  818:	{
    #####:  819:	  return -1;
        -:  820:	}
        -:  821:
    #####:  822:      gainCard(choice2, state, 0, currentPlayer);
        -:  823:
        -:  824:      //discard card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
        -:  826:
        -:  827:      //discard trashed card
    #####:  828:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  829:	{
    #####:  830:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  831:	    {
    #####:  832:	      discardCard(i, currentPlayer, state, 0);			
    #####:  833:	      break;
        -:  834:	    }
    #####:  835:	}
        -:  836:
        -:  837:
    #####:  838:      return 0;
        -:  839:		
        -:  840:    case smithy:
        -:  841:        /*
        -:  842:      //+3 Cards
        -:  843:      for (i = 0; i < 3; i++)
        -:  844:	{
        -:  845:	  drawCard(currentPlayer, state);
        -:  846:	}
        -:  847:			
        -:  848:      //discard card from hand
        -:  849:      discardCard(handPos, currentPlayer, state, 0);
        -:  850:      */
        1:  851:        playSmithy(state, handPos);
        1:  852:        return 0;
        -:  853:		
        -:  854:    case village:
        -:  855:      /*//+1 Card
        -:  856:      drawCard(currentPlayer, state);
        -:  857:			
        -:  858:      //+2 Actions
        -:  859:      state->numActions = state->numActions + 2;
        -:  860:			
        -:  861:      //discard played card from hand
        -:  862:      discardCard(handPos, currentPlayer, state, 0);*/
        2:  863:        playVillage(state, handPos);
        2:  864:        return 0;
        -:  865:		
        -:  866:    case baron:
    #####:  867:      state->numBuys++;//Increase buys by 1!
    #####:  868:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  869:	int p = 0;//Iterator for hand!
    #####:  870:	int card_not_discarded = 1;//Flag for discard set!
    #####:  871:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  872:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  873:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  874:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  875:	    state->discardCount[currentPlayer]++;
    #####:  876:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  877:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  878:	    }
    #####:  879:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  880:	    state->handCount[currentPlayer]--;
    #####:  881:	    card_not_discarded = 0;//Exit the loop
    #####:  882:	  }
    #####:  883:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  884:	    if(DEBUG) {
        -:  885:	      printf("No estate cards in your hand, invalid choice\n");
        -:  886:	      printf("Must gain an estate if there are any\n");
        -:  887:	    }
    #####:  888:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  889:	      gainCard(estate, state, 0, currentPlayer);
    #####:  890:	      state->supplyCount[estate]--;//Decrement estates
    #####:  891:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  892:		isGameOver(state);
    #####:  893:	      }
    #####:  894:	    }
    #####:  895:	    card_not_discarded = 0;//Exit the loop
    #####:  896:	  }
        -:  897:			    
        -:  898:	  else{
    #####:  899:	    p++;//Next card
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:			    
        -:  904:      else{
    #####:  905:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  906:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  907:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  908:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	    isGameOver(state);
    #####:  910:	  }
    #####:  911:	}
        -:  912:      }
        -:  913:	    
        -:  914:      
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case great_hall:
        -:  918:      //+1 Card
    #####:  919:      drawCard(currentPlayer, state);
        -:  920:			
        -:  921:      //+1 Actions
    #####:  922:      state->numActions++;
        -:  923:			
        -:  924:      //discard card from hand
    #####:  925:      discardCard(handPos, currentPlayer, state, 0);
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case minion:
        -:  929:      //+1 action
    #####:  930:      state->numActions++;
        -:  931:			
        -:  932:      //discard card from hand
    #####:  933:      discardCard(handPos, currentPlayer, state, 0);
        -:  934:			
    #####:  935:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  936:	{
    #####:  937:	  state->coins = state->coins + 2;
    #####:  938:	}
        -:  939:			
    #####:  940:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  941:	{
        -:  942:	  //discard hand
    #####:  943:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      discardCard(handPos, currentPlayer, state, 0);
        -:  946:	    }
        -:  947:				
        -:  948:	  //draw 4
    #####:  949:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      drawCard(currentPlayer, state);
    #####:  952:	    }
        -:  953:				
        -:  954:	  //other players discard hand and redraw if hand size > 4
    #####:  955:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  958:		{
    #####:  959:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  960:		    {
        -:  961:		      //discard hand
    #####:  962:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  963:			{
    #####:  964:			  discardCard(handPos, i, state, 0);
        -:  965:			}
        -:  966:							
        -:  967:		      //draw 4
    #####:  968:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  969:			{
    #####:  970:			  drawCard(i, state);
    #####:  971:			}
    #####:  972:		    }
    #####:  973:		}
    #####:  974:	    }
        -:  975:				
    #####:  976:	}
    #####:  977:      return 0;
        -:  978:		
        -:  979:    case steward:
        8:  980:      if (choice1 == 1)
branch  0 taken 13%
branch  1 taken 88%
        -:  981:	{
        -:  982:	  //+2 cards
        1:  983:	  drawCard(currentPlayer, state);
        1:  984:	  drawCard(currentPlayer, state);
        1:  985:	}
        7:  986:      else if (choice1 == 2)
branch  0 taken 14%
branch  1 taken 86%
        -:  987:	{
        -:  988:	  //+2 coins
        1:  989:	  state->coins = state->coins + 2;
        1:  990:	}
        -:  991:      else
        -:  992:	{
        -:  993:	  //trash 2 cards in hand
        6:  994:	  discardCard(choice2, currentPlayer, state, 1);
        6:  995:	  discardCard(choice3, currentPlayer, state, 1);
        -:  996:	}
        -:  997:			
        -:  998:      //discard card from hand
        8:  999:      discardCard(handPos, currentPlayer, state, 0);
        8: 1000:      return 0;
        -: 1001:		
        -: 1002:    case tribute:
    #####: 1003:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1004:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1005:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1006:	  state->deckCount[nextPlayer]--;
    #####: 1007:	}
    #####: 1008:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1009:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1010:	  state->discardCount[nextPlayer]--;
    #####: 1011:	}
        -: 1012:	else{
        -: 1013:	  //No Card to Reveal
        -: 1014:	  if (DEBUG){
        -: 1015:	    printf("No cards to reveal\n");
        -: 1016:	  }
        -: 1017:	}
    #####: 1018:      }
        -: 1019:	    
        -: 1020:      else{
    #####: 1021:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1023:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1024:	    state->deckCount[nextPlayer]++;
    #####: 1025:	    state->discard[nextPlayer][i] = -1;
    #####: 1026:	    state->discardCount[nextPlayer]--;
    #####: 1027:	  }
        -: 1028:			    
    #####: 1029:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1030:	} 
    #####: 1031:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1033:	state->deckCount[nextPlayer]--;
    #####: 1034:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1035:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1036:	state->deckCount[nextPlayer]--;
        -: 1037:      }    
        -: 1038:		       
    #####: 1039:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1040:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1041:	state->playedCardCount++;
    #####: 1042:	tributeRevealedCards[1] = -1;
    #####: 1043:      }
        -: 1044:
    #####: 1045:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1046:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1047:	  state->coins += 2;
    #####: 1048:	}
        -: 1049:		    
    #####: 1050:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1051:	  drawCard(currentPlayer, state);
    #####: 1052:	  drawCard(currentPlayer, state);
    #####: 1053:	}
        -: 1054:	else{//Action Card
    #####: 1055:	  state->numActions = state->numActions + 2;
        -: 1056:	}
    #####: 1057:      }
        -: 1058:	    
    #####: 1059:      return 0;
        -: 1060:		
        -: 1061:    case ambassador:
    #####: 1062:      j = 0;		//used to check if player has enough cards to discard
        -: 1063:
    #####: 1064:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1065:	{
    #####: 1066:	  return -1;				
        -: 1067:	}
        -: 1068:
    #####: 1069:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1070:	{
    #####: 1071:	  return -1;
        -: 1072:	}
        -: 1073:
    #####: 1074:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1075:	{
    #####: 1076:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1077:	    {
    #####: 1078:	      j++;
    #####: 1079:	    }
    #####: 1080:	}
    #####: 1081:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
        -: 1086:      if (DEBUG) 
        -: 1087:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1088:
        -: 1089:      //increase supply count for choosen card by amount being discarded
    #####: 1090:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1091:			
        -: 1092:      //each other player gains a copy of revealed card
    #####: 1093:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1096:	    {
    #####: 1097:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1098:	    }
    #####: 1099:	}
        -: 1100:
        -: 1101:      //discard played card from hand
    #####: 1102:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1103:
        -: 1104:      //trash copies of cards returned to supply
    #####: 1105:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1106:	{
    #####: 1107:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1108:	    {
    #####: 1109:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1110:		{
    #####: 1111:		  discardCard(i, currentPlayer, state, 1);
    #####: 1112:		  break;
        -: 1113:		}
    #####: 1114:	    }
    #####: 1115:	}			
        -: 1116:
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case cutpurse:
        -: 1120:
    #####: 1121:      updateCoins(currentPlayer, state, 2);
    #####: 1122:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1129:		    {
    #####: 1130:		      discardCard(j, i, state, 0);
    #####: 1131:		      break;
        -: 1132:		    }
    #####: 1133:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1134:		    {
    #####: 1135:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1136:			{
        -: 1137:			  if (DEBUG)
        -: 1138:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1139:			}	
    #####: 1140:		      break;
        -: 1141:		    }		
    #####: 1142:		}
        -: 1143:					
    #####: 1144:	    }
        -: 1145:				
    #####: 1146:	}				
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1150:
    #####: 1151:      return 0;
        -: 1152:
        -: 1153:		
        -: 1154:    case embargo: 
        -: 1155:      //+2 Coins
    #####: 1156:      state->coins = state->coins + 2;
        -: 1157:			
        -: 1158:      //see if selected pile is in play
    #####: 1159:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1160:	{
    #####: 1161:	  return -1;
        -: 1162:	}
        -: 1163:			
        -: 1164:      //add embargo token to selected supply pile
    #####: 1165:      state->embargoTokens[choice1]++;
        -: 1166:			
        -: 1167:      //trash card
    #####: 1168:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1169:      return 0;
        -: 1170:		
        -: 1171:    case outpost:
        -: 1172:      //set outpost flag
    #####: 1173:      state->outpostPlayed++;
        -: 1174:			
        -: 1175:      //discard card
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case salvager:
        -: 1180:      //+1 buy
    #####: 1181:      state->numBuys++;
        -: 1182:			
    #####: 1183:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1184:	{
        -: 1185:	  //gain coins equal to trashed card
    #####: 1186:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1187:	  //trash card
    #####: 1188:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1189:	}
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case sea_hag:
    #####: 1196:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1197:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1198:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1199:	  state->discardCount[i]++;
    #####: 1200:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1201:	}
    #####: 1202:      }
    #####: 1203:      return 0;
        -: 1204:		
        -: 1205:    case treasure_map:
        -: 1206:      //search hand for another treasure_map
    #####: 1207:      index = -1;
    #####: 1208:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1209:	{
    #####: 1210:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1211:	    {
    #####: 1212:	      index = i;
    #####: 1213:	      break;
        -: 1214:	    }
    #####: 1215:	}
    #####: 1216:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1217:	{
        -: 1218:	  //trash both treasure cards
    #####: 1219:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1220:	  discardCard(index, currentPlayer, state, 1);
        -: 1221:
        -: 1222:	  //gain 4 Gold cards
    #####: 1223:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1224:	    {
    #####: 1225:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1226:	    }
        -: 1227:				
        -: 1228:	  //return success
    #####: 1229:	  return 1;
        -: 1230:	}
        -: 1231:			
        -: 1232:      //no second treasure_map found in hand
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:	
    #####: 1236:  return -1;
       13: 1237:}
        -: 1238:
function discardCard called 22 returned 100% blocks executed 90%
        -: 1239:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1240:{
        -: 1241:	
        -: 1242:  //if card is not trashed, added to Played pile 
       22: 1243:  if (trashFlag < 1)
branch  0 taken 45%
branch  1 taken 55%
        -: 1244:    {
        -: 1245:      //add card to played pile
       10: 1246:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1247:      state->playedCardCount++;
       10: 1248:    }
        -: 1249:	
        -: 1250:  //set played card to -1
       22: 1251:  state->hand[currentPlayer][handPos] = -1;
        -: 1252:	
        -: 1253:  //remove card from player's hand
       22: 1254:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 18%
branch  1 taken 82%
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
        4: 1257:      state->handCount[currentPlayer]--;
        4: 1258:    }
       18: 1259:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
    #####: 1262:      state->handCount[currentPlayer]--;
    #####: 1263:    }
        -: 1264:  else 	
        -: 1265:    {
        -: 1266:      //replace discarded card with last card in hand
       18: 1267:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1268:      //set last card to -1
       18: 1269:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1270:      //reduce number of cards in hand
       18: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:	
       22: 1274:  return 0;
        -: 1275:}
        -: 1276:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1277:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1278:{
        -: 1279:  //Note: supplyPos is enum of choosen card
        -: 1280:	
        -: 1281:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1282:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1283:    {
    #####: 1284:      return -1;
        -: 1285:    }
        -: 1286:	
        -: 1287:  //added card for [whoseTurn] current player:
        -: 1288:  // toFlag = 0 : add to discard
        -: 1289:  // toFlag = 1 : add to deck
        -: 1290:  // toFlag = 2 : add to hand
        -: 1291:
    #####: 1292:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1293:    {
    #####: 1294:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1295:      state->deckCount[player]++;
    #####: 1296:    }
    #####: 1297:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1298:    {
    #####: 1299:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1300:      state->handCount[player]++;
    #####: 1301:    }
        -: 1302:  else
        -: 1303:    {
    #####: 1304:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1305:      state->discardCount[player]++;
        -: 1306:    }
        -: 1307:	
        -: 1308:  //decrease number in supply pile
    #####: 1309:  state->supplyCount[supplyPos]--;
        -: 1310:	 
    #####: 1311:  return 0;
    #####: 1312:}
        -: 1313:
function updateCoins called 887 returned 100% blocks executed 100%
        -: 1314:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1315:{
        -: 1316:  int i;
        -: 1317:	
        -: 1318:  //reset coin count
      887: 1319:  state->coins = 0;
        -: 1320:
        -: 1321:  //add coins for each Treasure card in player's hand
     8004: 1322:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22%
        -: 1323:    {
     3115: 1324:      if (state->hand[player][i] == copper)
branch  0 taken 50%
branch  1 taken 50%
        -: 1325:	{
     1568: 1326:	  state->coins += 1;
     1568: 1327:	}
     1547: 1328:      else if (state->hand[player][i] == silver)
branch  0 taken 43%
branch  1 taken 57%
        -: 1329:	{
      660: 1330:	  state->coins += 2;
      660: 1331:	}
      887: 1332:      else if (state->hand[player][i] == gold)
branch  0 taken 74%
branch  1 taken 26%
        -: 1333:	{
      660: 1334:	  state->coins += 3;
      660: 1335:	}	
     3115: 1336:    }	
        -: 1337:
        -: 1338:  //add bonus
      887: 1339:  state->coins += bonus;
        -: 1340:
      887: 1341:  return 0;
        -: 1342:}
        -: 1343:
function playAdventurer called 2 returned 100% blocks executed 71%
        -: 1344:int playAdventurer(struct gameState *state){
        2: 1345:    int drawntreasure = 0;
        2: 1346:    int currentPlayer = whoseTurn(state);
        -: 1347:    int cardDrawn;
        -: 1348:    int temphand[MAX_HAND];// moved above the if statement
        2: 1349:    int z = 0;
        -: 1350:    
       12: 1351:    while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33%
        4: 1352:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####: 1353:            shuffle(currentPlayer, state);
    #####: 1354:        }
        4: 1355:        drawCard(currentPlayer, state);
        4: 1356:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4: 1357:        if (cardDrawn == copper || cardDrawn == silver /*|| cardDrawn == gold*/)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        4: 1358:            drawntreasure++;
        -: 1359:        else{
    #####: 1360:            temphand[z]=cardDrawn;
    #####: 1361:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1362:            z++;
        -: 1363:        }
        -: 1364:    }
        4: 1365:    while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100%
    #####: 1366:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1367:        z=z-1;
        -: 1368:    }
        2: 1369:    return 0;
        -: 1370:}
function playSmithy called 1 returned 100% blocks executed 100%
        -: 1371:int playSmithy(struct gameState *state, int handPos){
        -: 1372:    int i;
        1: 1373:    int currentPlayer = whoseTurn(state);
        -: 1374:    
        -: 1375:    //+3 Cards
       12: 1376:    for (i = 0; i < /*3*/5; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1377:    {
        5: 1378:        drawCard(currentPlayer, state);
        5: 1379:    }
        -: 1380:    
        -: 1381:    //discard card from hand
        -: 1382:    //discardCard(handPos, currentPlayer, state, 0);
        1: 1383:    return 0;
        -: 1384:}
function playVillage called 2 returned 100% blocks executed 100%
        -: 1385:int playVillage(struct gameState *state, int handPos){
        -: 1386:    //+1 Card
        2: 1387:    int currentPlayer = whoseTurn(state);
        2: 1388:    drawCard(currentPlayer, state);
        -: 1389:    
        -: 1390:    //+2 Actions
        2: 1391:    state->numActions = state->numActions + 2;
        -: 1392:    
        -: 1393:    //discard played card from hand
        2: 1394:    discardCard(handPos, currentPlayer, state, 0);
        2: 1395:    return 0;
        -: 1396:}
function playFeast called 0 returned 0% blocks executed 0%
        -: 1397:int playFeast(struct gameState *state, int choice1){
        -: 1398:    //gain card with cost up to 5
        -: 1399:    //Backup hand
        -: 1400:    int i;
    #####: 1401:    int currentPlayer = whoseTurn(state);
        -: 1402:    int temphand[MAX_HAND];
        -: 1403:    int x;
        -: 1404:    
    #####: 1405:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1406:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1407:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1408:    }
        -: 1409:    //Backup hand
        -: 1410:    
        -: 1411:    //Update Coins for Buy
    #####: 1412:    updateCoins(currentPlayer, state, 5);
    #####: 1413:    x = 1;//Condition to loop on
    #####: 1414:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1415:        if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -: 1416:            if (DEBUG)
        -: 1417:                printf("None of that card left, sorry!\n");
        -: 1418:            
        -: 1419:            if (DEBUG){
        -: 1420:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1421:            }
    #####: 1422:        }
    #####: 1423:        else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####: 1424:            printf("That card is too expensive!\n");
        -: 1425:            
        -: 1426:            if (DEBUG){
        -: 1427:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1428:            }
    #####: 1429:        }
        -: 1430:        else{
        -: 1431:            
        -: 1432:            if (DEBUG){
        -: 1433:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1434:            }
        -: 1435:            
    #####: 1436:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1437:            x = 0;//No more buying cards
        -: 1438:            
        -: 1439:            if (DEBUG){
        -: 1440:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1441:            }
        -: 1442:            
        -: 1443:        }
        -: 1444:    }     
        -: 1445:    
        -: 1446:    //Reset Hand
    #####: 1447:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1448:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1449:        temphand[i] = -1;
    #####: 1450:    }
        -: 1451:    //Reset Hand
        -: 1452:    
    #####: 1453:    return 0;
        -: 1454:    
        -: 1455:}
function playCouncil_Room called 0 returned 0% blocks executed 0%
        -: 1456:int playCouncil_Room(struct gameState *state, int handPos){
        -: 1457:    //+4 cards
        -: 1458:    int i;
    #####: 1459:    int currentPlayer = whoseTurn(state);
        -: 1460:    
    #####: 1461:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1462:    {
    #####: 1463:        drawCard(currentPlayer, state);
    #####: 1464:    }
        -: 1465:    
        -: 1466:    //+1 Buy
    #####: 1467:    state->numBuys+=2;
        -: 1468:    
        -: 1469:    //Each other player draws a card
    #####: 1470:    for (i = 0; i < state->numPlayers; i+=2)
branch  0 never executed
branch  1 never executed
        -: 1471:    {
    #####: 1472:        if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1473:        {
    #####: 1474:            drawCard(i, state);
    #####: 1475:        }
    #####: 1476:    }
        -: 1477:    
        -: 1478:    //put played card in played card pile
    #####: 1479:    discardCard(handPos, currentPlayer, state, 0);
        -: 1480:    
    #####: 1481:    return 0;
        -: 1482:}
        -: 1483:
        -: 1484://end of dominion.c
        -: 1485:
