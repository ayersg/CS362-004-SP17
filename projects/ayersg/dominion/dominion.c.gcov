        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 224 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      224:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      224:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       80:   12:    return -1;
      144:   13:  return 0;
      224:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 94%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     1140:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      600:   65:        }
       60:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
branch  0 taken 67%
branch  1 taken 33%
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        4:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
branch  0 taken 67%
branch  1 taken 33%
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        4:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      120:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
        -:  114:		{
        6:  115:		  if (numPlayers == 2){ 
branch  0 taken 67%
branch  1 taken 33%
        4:  116:		    state->supplyCount[i] = 8; 
        4:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        6:  119:		}
        -:  120:	      else
        -:  121:		{
       54:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      870:  130:	}
        -:  131:
      120:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       44:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
      128:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
       48:  145:	}
      256:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
      112:  150:	}
       16:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       44:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       16:  160:    }
        -:  161:
        -:  162:  //draw player hands
       44:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       16:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
      162:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       30:  193:    drawCard(state->whoseTurn, state);
       30:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:  return 0;
        6:  199:}
        -:  200:
function shuffle called 786207 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   786207:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   786207:  209:  if (state->deckCount[player] < 1)
branch  0 taken 99%
branch  1 taken 1%
   786191:  210:    return -1;
       16:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      352:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      160:  215:    card = floor(Random() * state->deckCount[player]);
      160:  216:    newDeck[newDeckPos] = state->deck[player][card];
      160:  217:    newDeckPos++;
      964:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 67%
branch  1 taken 33%
      322:  219:      state->deck[player][i] = state->deck[player][i+1];
      322:  220:    }
      160:  221:    state->deckCount[player]--;
        -:  222:  }
      352:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      160:  224:    state->deck[player][i] = newDeck[i];
      160:  225:    state->deckCount[player]++;
      160:  226:  }
        -:  227:
       16:  228:  return 0;
   786207:  229:}
        -:  230:
function playCard called 1915749 returned 100% blocks executed 75%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
  1915749:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
  1915749:  237:  if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
  1915749:  243:  if ( state->numActions < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
  1915749:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
  3831498:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
  1915749:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 15%
branch  1 taken 85%
        -:  259:    {
   291137:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
  1624612:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
  1624612:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
  1624612:  269:  return 0;
  1915749:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 3779643 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
  3779643:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 1915749 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
  1915749:  316:  int currentPlayer = whoseTurn(state);
  1915749:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 6841440 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
  6841440:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 13015395 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
 13015395:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 1915748 returned 100% blocks executed 92%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
  1915748:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
 29449880:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 87%
branch  1 taken 13%
 12809192:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
 12809192:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
 12809192:  359:  }
  1915748:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
  1915748:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 100%
branch  1 taken 0%
  1915748:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
  1915748:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
  1915748:  370:  state->outpostPlayed = 0;
  1915748:  371:  state->phase = 0;
  1915748:  372:  state->numActions = 1;
  1915748:  373:  state->coins = 0;
  1915748:  374:  state->numBuys = 1;
  1915748:  375:  state->playedCardCount = 0;
  1915748:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
 22988976:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
  9578740:  381:    drawCard(state->whoseTurn, state);//Draw a card
  9578740:  382:  }
        -:  383:
        -:  384:  //Update money
  1915748:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
  1915748:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 15869798 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
 15869798:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 5%
branch  1 taken 95%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1572382:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
   786191:  538:    state->deckCount[player] = state->discardCount[player];
   786191:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
   786191:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
   786191:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
   786191:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
   786191:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
   786191:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
   786191:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
 15083607:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
 15083607:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
 15083607:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 15083607:  576:    state->deckCount[player]--;
 15083607:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
 15083607:  580:  return 0;
 15869798:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:// ASSIGNMENT 2 : Refactor
        -:  647:
        -:  648:
function Adventurer called 0 returned 0% blocks executed 0%
        -:  649:int Adventurer(struct gameState *state){
    #####:  650:  int drawntreasure = 0;
    #####:  651:  int currentPlayer = whoseTurn(state);
        -:  652:  int cardDrawn;
        -:  653:  int temphand[MAX_HAND];
    #####:  654:  int z = 0;// this is the counter for the temp hand
        -:  655:
    #####:  656:  while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  657:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  658:      shuffle(currentPlayer, state);
    #####:  659:    }
    #####:  660:    drawCard(currentPlayer, state);
    #####:  661:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  662:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  663:      drawntreasure++;
        -:  664:    else{
    #####:  665:      temphand[z]=cardDrawn;
    #####:  666:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  667:      z++;
        -:  668:    }
        -:  669:  }
    #####:  670:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  671:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  672:    z=z-1;
        -:  673:  }
    #####:  674:  return 0;
        -:  675:}
        -:  676:
function Smithy called 1572757 returned 100% blocks executed 100%
        -:  677:int Smithy(struct gameState *state, int handPos){
        -:  678:  //+3 Cards
        -:  679:
  1572757:  680:  int currentPlayer = whoseTurn(state);
        -:  681:
 12582056:  682:  for (int i = 0; i < 3; i++)         
branch  0 taken 75%
branch  1 taken 25%
        -:  683:      {
  4718271:  684:        drawCard(currentPlayer, state);
  4718271:  685:      }
        -:  686:      
        -:  687:  //discard card from hand
  1572757:  688:  discardCard(handPos, currentPlayer, state, 0);
  1572757:  689:  return 0;
        -:  690:
        -:  691:}
        -:  692:
function Seahag called 342992 returned 100% blocks executed 100%
        -:  693:int Seahag(struct gameState *state){
        -:  694:
   342992:  695:  int currentPlayer = whoseTurn(state);
  3429920:  696:  for (int i = 0; i < state->numPlayers; i++){
branch  0 taken 80%
branch  1 taken 20%
  1371968:  697:    if (i != currentPlayer){
branch  0 taken 75%
branch  1 taken 25%
  1028976:  698:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          
  1028976:  699:      state->deckCount[i]--;
  1028976:  700:      state->discardCount[i]++; 
  1028976:  701:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
  1028976:  702:    }
  1371968:  703:  }
   342992:  704:      return 0;
        -:  705:}
        -:  706:
function Village called 1572757 returned 100% blocks executed 100%
        -:  707:int Village(struct gameState *state, int handPos){
        -:  708:
  1572757:  709:  int currentPlayer = whoseTurn(state);
        -:  710:
        -:  711:  //+1 Card
  1572757:  712:  drawCard(currentPlayer, state);
        -:  713:  
        -:  714:  //+2 Actions
  1572757:  715:  state->numActions = state->numActions + 2;
        -:  716:  
        -:  717:  //discard played card from hand
  1572757:  718:  discardCard(handPos, currentPlayer, state, 0);
  1572757:  719:  return 0;
        -:  720:}
        -:  721:
function Remodel called 0 returned 0% blocks executed 0%
        -:  722:int Remodel(int choice1, int choice2, struct gameState *state, int handPos){
        -:  723:
    #####:  724:  int currentPlayer = whoseTurn(state);
        -:  725:
    #####:  726:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  727:
    #####:  728:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )  //BUG
branch  0 never executed
branch  1 never executed
        -:  729:    {
    #####:  730:      return -1;
        -:  731:    }
        -:  732:
    #####:  733:  gainCard(choice2, state, 0, currentPlayer);
        -:  734:
        -:  735:  //discard card from hand
    #####:  736:  discardCard(handPos, currentPlayer, state, 0);
        -:  737:
        -:  738:  //discard trashed cards
    #####:  739:  for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  740:  {
    #####:  741:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  742:      {
    #####:  743:        discardCard(i, currentPlayer, state, 0);      
    #####:  744:        break;
        -:  745:      }
    #####:  746:  }
        -:  747:
    #####:  748:  return 0;
    #####:  749:}
        -:  750:
function cardEffect called 1915749 returned 100% blocks executed 12%
        -:  751:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  752:{
        -:  753:  int i;
        -:  754:  int j;
        -:  755:  int k;
        -:  756:  int x;
        -:  757:  int index;
  1915749:  758:  int currentPlayer = whoseTurn(state);
  1915749:  759:  int nextPlayer = currentPlayer + 1;
        -:  760:
  1915749:  761:  int tributeRevealedCards[2] = {-1, -1};
        -:  762:  int temphand[MAX_HAND];// moved above the if statement
  1915749:  763:  int drawntreasure=0;
        -:  764:  int cardDrawn;
  1915749:  765:  int z = 0;// this is the counter for the temp hand
  1915749:  766:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  767:    nextPlayer = 0;
    #####:  768:  }
        -:  769:  
        -:  770:	
        -:  771:  //uses switch to select card and perform actions
  5404255:  772:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 29%
branch  7 taken 29%
branch  8 taken 29%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 6%
branch 19 taken 6%
branch 20 taken 0%
        -:  773:    {
        -:  774:    /*********ADVENTURER***********/
        -:  775:    case adventurer:
    #####:  776:      Adventurer(state);  //Refactored to its own function
        -:  777:
        -:  778:    /*********COUNCIL ROOM***********/
        -:  779:    case council_room:
        -:  780:      //+4 Cards
    #####:  781:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  782:      	{
    #####:  783:      	  drawCard(currentPlayer, state);
    #####:  784:      	}
        -:  785:			
        -:  786:      //+1 Buy
    #####:  787:      state->numBuys++;
        -:  788:			
        -:  789:      //Each other player draws a card
    #####:  790:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  791:    	{
    #####:  792:    	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  793:    	    {
    #####:  794:    	      drawCard(i, state);
    #####:  795:    	    }
    #####:  796:    	}
        -:  797:			
        -:  798:      //put played card in played card pile
    #####:  799:      discardCard(handPos, currentPlayer, state, 0);
        -:  800:			
    #####:  801:      return 0;
        -:  802:			
        -:  803:    /*********FEAST***********/  
        -:  804:    case feast:
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
    #####:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  808:      	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  809:      	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  810:      }
        -:  811:      //Backup hand
        -:  812:
        -:  813:      //Update Coins for Buy
    #####:  814:      updateCoins(currentPlayer, state, 5);
    #####:  815:      x = 1;//Condition to loop on
    #####:  816:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  817:      	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  818:      	  if (DEBUG)
        -:  819:      	    printf("None of that card left, sorry!\n");
        -:  820:
        -:  821:      	  if (DEBUG){
        -:  822:      	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  823:      	  }
    #####:  824:      	}
    #####:  825:      	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  826:      	  printf("That card is too expensive!\n");
        -:  827:
        -:  828:      	  if (DEBUG){
        -:  829:      	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  830:      	  }
    #####:  831:      	}
        -:  832:      	else{
        -:  833:
        -:  834:      	  if (DEBUG){
        -:  835:      	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:      	  }
        -:  837:
    #####:  838:      	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  839:      	  x = 0;//No more buying cards
        -:  840:
        -:  841:      	  if (DEBUG){
        -:  842:      	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:      	  }
        -:  844:
        -:  845:	     }
        -:  846:      }     
        -:  847:
        -:  848:      //Reset Hand
    #####:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  850:        	state->hand[currentPlayer][i] = temphand[i];
    #####:  851:        	temphand[i] = -1;
    #####:  852:      }
        -:  853:      //Reset Hand
        -:  854:      			
    #####:  855:      return 0;
        -:  856:
        -:  857:    /*********GARDENS***********/			
        -:  858:    case gardens:
    #####:  859:      return -1;
        -:  860:			
        -:  861:    /*********MINE***********/
        -:  862:    case mine:
    #####:  863:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  864:
    #####:  865:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:      	{
    #####:  867:      	  return -1;
        -:  868:      	}
        -:  869:		
    #####:  870:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:      	{
    #####:  872:      	  return -1;
        -:  873:      	}
        -:  874:
    #####:  875:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  876:      	{
    #####:  877:      	  return -1;
        -:  878:      	}
        -:  879:
    #####:  880:      gainCard(choice2, state, 2, currentPlayer);
        -:  881:
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
        -:  884:
        -:  885:      //discard trashed card
    #####:  886:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  887:    	{
    #####:  888:    	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  889:    	    {
    #####:  890:    	      discardCard(i, currentPlayer, state, 0);			
    #####:  891:    	      break;
        -:  892:    	    }
    #####:  893:    	}
        -:  894:			
    #####:  895:      return 0;
        -:  896:
        -:  897:    /*********REMODEL***********/			
        -:  898:    case remodel:
    #####:  899:      Remodel(choice1, choice2, state, handPos);
        -:  900:
        -:  901:    /*********SMITHY***********/		
        -:  902:    case smithy:
  1572757:  903:      Smithy(state, handPos);
        -:  904:
        -:  905:    /*********VILLAGE***********/		
        -:  906:    case village:
  1572757:  907:      Village(state, handPos);
        -:  908:
        -:  909:    /*********BARON***********/
        -:  910:    case baron:
  1572757:  911:      state->numBuys++;//Increase buys by 1!
  1572757:  912:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0%
branch  1 taken 100%
    #####:  913:      	int p = 0;//Iterator for hand!
    #####:  914:      	int card_not_discarded = 1;//Flag for discard set!
    #####:  915:      	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  916:    	   if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  917:    	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  918:    	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  919:    	    state->discardCount[currentPlayer]++;
    #####:  920:    	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  921:    	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  922:    	    }
    #####:  923:    	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  924:    	    state->handCount[currentPlayer]--;
    #####:  925:    	    card_not_discarded = 0;//Exit the loop
    #####:  926:    	  }
    #####:  927:    	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  928:    	    if(DEBUG) {
        -:  929:    	      printf("No estate cards in your hand, invalid choice\n");
        -:  930:    	      printf("Must gain an estate if there are any\n");
        -:  931:    	    }
    #####:  932:    	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  933:    	      gainCard(estate, state, 0, currentPlayer);
    #####:  934:    	      state->supplyCount[estate]--;//Decrement estates
    #####:  935:    	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  936:           		isGameOver(state);
    #####:  937:    	      }
    #####:  938:    	    }
    #####:  939:    	    card_not_discarded = 0;//Exit the loop
    #####:  940:    	  }
        -:  941:    			    
        -:  942:    	  else{
    #####:  943:    	    p++;//Next card
        -:  944:    	  }
        -:  945:  	   }
    #####:  946:      }
        -:  947:			    
        -:  948:      else{
  1572757:  949:      	if (supplyCount(estate, state) > 0){
branch  0 taken 100%
branch  1 taken 0%
  1572757:  950:      	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
  1572757:  951:      	  state->supplyCount[estate]--;//Decrement Estates
  1572757:  952:      	  if (supplyCount(estate, state) == 0){
branch  0 taken 0%
branch  1 taken 100%
    #####:  953:      	    isGameOver(state);
    #####:  954:      	  }
  1572757:  955:      	}
        -:  956:      }
        -:  957:	    
        -:  958:      
  1572757:  959:      return 0;
        -:  960:
        -:  961:    /*********GREAT HALL***********/		
        -:  962:    case great_hall:
        -:  963:      //+1 Card
    #####:  964:      drawCard(currentPlayer, state);
        -:  965:			
        -:  966:      //+1 Actions
    #####:  967:      state->numActions++;
        -:  968:			
        -:  969:      //discard card from hand
    #####:  970:      discardCard(handPos, currentPlayer, state, 0);
    #####:  971:      return 0;
        -:  972:
        -:  973:    /*********MINION***********/		
        -:  974:    case minion:
        -:  975:      //+1 action
    #####:  976:      state->numActions++;
        -:  977:			
        -:  978:      //discard card from hand
    #####:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:			
    #####:  981:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  982:      	{
    #####:  983:      	  state->coins = state->coins + 2;
    #####:  984:      	}
        -:  985:			
    #####:  986:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  987:  	   {
        -:  988:    	  //discard hand
    #####:  989:    	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  990:    	    {
    #####:  991:    	      discardCard(handPos, currentPlayer, state, 0);
        -:  992:    	    }
        -:  993:  				
        -:  994:    	  //draw 4
    #####:  995:    	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  996:    	    {
    #####:  997:    	      drawCard(currentPlayer, state);
    #####:  998:    	    }
        -:  999:  				
        -: 1000:  	  //other players discard hand and redraw if hand size > 4
    #####: 1001:  	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1002:  	    {
    #####: 1003:  	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1004:    		{
    #####: 1005:  		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1006:  		  {
        -: 1007:  		      //discard hand
    #####: 1008:  		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1009:        			{
    #####: 1010:        			  discardCard(handPos, i, state, 0);
        -: 1011:        			}
        -: 1012:  							
        -: 1013:  		      //draw 4
    #####: 1014:  		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1015:      			{
    #####: 1016:      			  drawCard(i, state);
    #####: 1017:      			}
    #####: 1018:  		  }
    #####: 1019:  		  }
    #####: 1020:  	    }
        -: 1021:  				
    #####: 1022:  	 }
    #####: 1023:      return 0;
        -: 1024:
        -: 1025:    /*********STEWARD***********/		
        -: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:      	{
        -: 1029:      	  //+2 cards
    #####: 1030:      	  drawCard(currentPlayer, state);
    #####: 1031:      	  drawCard(currentPlayer, state);
    #####: 1032:      	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:      	{
        -: 1035:      	  //+2 coins
    #####: 1036:      	  state->coins = state->coins + 2;
    #####: 1037:      	}
        -: 1038:      else
        -: 1039:      	{
        -: 1040:      	  //trash 2 cards in hand
    #####: 1041:      	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1042:      	  discardCard(choice3, currentPlayer, state, 1);
        -: 1043:      	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1047:      return 0;
        -: 1048:
        -: 1049:    /*********TRIBUTE***********/		
        -: 1050:    case tribute:
    #####: 1051:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1052:      	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1053:      	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:      	  state->deckCount[nextPlayer]--;
    #####: 1055:      	}
    #####: 1056:      	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1057:      	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1058:      	  state->discardCount[nextPlayer]--;
    #####: 1059:      	}
        -: 1060:      	else{
        -: 1061:      	  //No Card to Reveal
        -: 1062:      	  if (DEBUG){
        -: 1063:      	    printf("No cards to reveal\n");
        -: 1064:      	  }
        -: 1065:      	}
    #####: 1066:            }
        -: 1067:      	    
        -: 1068:            else{
    #####: 1069:      	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1070:      	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1071:      	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1072:      	    state->deckCount[nextPlayer]++;
    #####: 1073:      	    state->discard[nextPlayer][i] = -1;
    #####: 1074:      	    state->discardCount[nextPlayer]--;
    #####: 1075:      	  }
        -: 1076:      			    
    #####: 1077:      	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1078:      	} 
    #####: 1079:      	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1080:      	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:      	state->deckCount[nextPlayer]--;
    #####: 1082:      	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:      	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:      	state->deckCount[nextPlayer]--;
        -: 1085:            }    
        -: 1086:      		       
    #####: 1087:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1088:      	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1089:      	state->playedCardCount++;
    #####: 1090:      	tributeRevealedCards[1] = -1;
    #####: 1091:            }
        -: 1092:
    #####: 1093:            for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1094:      	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1095:      	  state->coins += 2;
    #####: 1096:      	}
        -: 1097:      		    
    #####: 1098:      	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1099:      	  drawCard(currentPlayer, state);
    #####: 1100:      	  drawCard(currentPlayer, state);
    #####: 1101:      	}
        -: 1102:      	else{//Action Card
    #####: 1103:      	  state->numActions = state->numActions + 2;
        -: 1104:      	}
    #####: 1105:      }
        -: 1106:	    
    #####: 1107:      return 0;
        -: 1108:
        -: 1109:    /*********AMBASSADOR***********/		
        -: 1110:    case ambassador:
    #####: 1111:      j = 0;		//used to check if player has enough cards to discard
        -: 1112:
    #####: 1113:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1114:      	{
    #####: 1115:      	  return -1;				
        -: 1116:      	}
        -: 1117:
    #####: 1118:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1119:      	{
    #####: 1120:      	  return -1;
        -: 1121:      	}
        -: 1122:
    #####: 1123:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:      	{
    #####: 1125:      	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1126:      	    {
    #####: 1127:      	      j++;
    #####: 1128:      	    }
    #####: 1129:      	}
    #####: 1130:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1131:      	{
    #####: 1132:      	  return -1;				
        -: 1133:      	}
        -: 1134:
        -: 1135:      if (DEBUG) 
        -: 1136:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1137:
        -: 1138:      //increase supply count for choosen card by amount being discarded
    #####: 1139:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1140:			
        -: 1141:      //each other player gains a copy of revealed card
    #####: 1142:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1145:	    {
    #####: 1146:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1147:	    }
    #####: 1148:	}
        -: 1149:
        -: 1150:      //discard played card from hand
    #####: 1151:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1152:
        -: 1153:      //trash copies of cards returned to supply
    #####: 1154:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
    #####: 1156:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1157:	    {
    #####: 1158:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1159:		{
    #####: 1160:		  discardCard(i, currentPlayer, state, 1);
    #####: 1161:		  break;
        -: 1162:		}
    #####: 1163:	    }
    #####: 1164:	}			
        -: 1165:
    #####: 1166:      return 0;
        -: 1167:
        -: 1168:    /*********CUTPURSE***********/		
        -: 1169:    case cutpurse:
        -: 1170:
    #####: 1171:      updateCoins(currentPlayer, state, 2);
    #####: 1172:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1173:	{
    #####: 1174:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1175:	    {
    #####: 1176:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1177:		{
    #####: 1178:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1179:		    {
    #####: 1180:		      discardCard(j, i, state, 0);
    #####: 1181:		      break;
        -: 1182:		    }
    #####: 1183:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1184:		    {
    #####: 1185:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1186:			{
        -: 1187:			  if (DEBUG)
        -: 1188:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1189:			}	
    #####: 1190:		      break;
        -: 1191:		    }		
    #####: 1192:		}
        -: 1193:					
    #####: 1194:	    }
        -: 1195:				
    #####: 1196:	}				
        -: 1197:
        -: 1198:      //discard played card from hand
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1200:
    #####: 1201:      return 0;
        -: 1202:
        -: 1203:    /*********EMBARGO***********/		
        -: 1204:    case embargo: 
        -: 1205:      //+2 Coins
    #####: 1206:      state->coins = state->coins + 2;
        -: 1207:			
        -: 1208:      //see if selected pile is in play
    #####: 1209:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1210:	{
    #####: 1211:	  return -1;
        -: 1212:	}
        -: 1213:			
        -: 1214:      //add embargo token to selected supply pile
    #####: 1215:      state->embargoTokens[choice1]++;
        -: 1216:			
        -: 1217:      //trash card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    /*********OUTPOST***********/		
        -: 1222:    case outpost:
        -: 1223:      //set outpost flag
    #####: 1224:      state->outpostPlayed++;
        -: 1225:			
        -: 1226:      //discard card
    #####: 1227:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1228:      return 0;
        -: 1229:
        -: 1230:    /*********SALVAGER***********/
        -: 1231:    case salvager:
        -: 1232:      //+1 buy
    #####: 1233:      state->numBuys++;
        -: 1234:			
    #####: 1235:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
        -: 1237:	  //gain coins equal to trashed card
    #####: 1238:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1239:	  //trash card
    #####: 1240:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1241:	}
        -: 1242:			
        -: 1243:      //discard card
    #####: 1244:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    /*********SEA HAG***********/
        -: 1248:    case sea_hag:
   342992: 1249:      Seahag(state);
        -: 1250:	
        -: 1251:    /*********TREASURE MAP***********/
        -: 1252:    case treasure_map:
        -: 1253:      //search hand for another treasure_map
   342992: 1254:      index = -1;
  3968224: 1255:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 85%
branch  1 taken 15%
        -: 1256:    	{
  1744830: 1257:    	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 3%
branch  1 taken 97%
branch  2 taken 100%
branch  3 taken 0%
        -: 1258:    	    {
    51855: 1259:    	      index = i;
    51855: 1260:    	      break;
        -: 1261:    	    }
  1641120: 1262:    	}
   342992: 1263:      if (index > -1)
branch  0 taken 15%
branch  1 taken 85%
        -: 1264:	{
        -: 1265:	  //trash both treasure cards
    51855: 1266:	  discardCard(handPos, currentPlayer, state, 1);
    51855: 1267:	  discardCard(index, currentPlayer, state, 1);
        -: 1268:
        -: 1269:	  //gain 4 Gold cards
   518550: 1270:	  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1271:	    {
   207420: 1272:	      gainCard(gold, state, 1, currentPlayer);
   207420: 1273:	    }
        -: 1274:				
        -: 1275:	  //return success
    51855: 1276:	  return 1;
        -: 1277:	}
        -: 1278:			
        -: 1279:      //no second treasure_map found in hand
   291137: 1280:      return -1;
        -: 1281:    }
        -: 1282:	
    #####: 1283:  return -1;
  1915749: 1284:}
        -: 1285:
function discardCard called 3249224 returned 100% blocks executed 100%
        -: 1286:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1287:{
        -: 1288:	
        -: 1289:  //if card is not trashed, added to Played pile 
  3249224: 1290:  if (trashFlag < 1)
branch  0 taken 97%
branch  1 taken 3%
        -: 1291:    {
        -: 1292:      //add card to played pile
  3145514: 1293:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
  3145514: 1294:      state->playedCardCount++;
  3145514: 1295:    }
        -: 1296:	
        -: 1297:  //set played card to -1
  3249224: 1298:  state->hand[currentPlayer][handPos] = -1;
        -: 1299:	
        -: 1300:  //remove card from player's hand
  3249224: 1301:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 7%
branch  1 taken 93%
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
   218912: 1304:      state->handCount[currentPlayer]--;
   218912: 1305:    }
  3030312: 1306:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1%
branch  1 taken 99%
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
     8052: 1309:      state->handCount[currentPlayer]--;
     8052: 1310:    }
        -: 1311:  else 	
        -: 1312:    {
        -: 1313:      //replace discarded card with last card in hand
  3022260: 1314:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1315:      //set last card to -1
  3022260: 1316:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1317:      //reduce number of cards in hand
  3022260: 1318:      state->handCount[currentPlayer]--;
        -: 1319:    }
        -: 1320:	
  3249224: 1321:  return 0;
        -: 1322:}
        -: 1323:
function gainCard called 3695926 returned 100% blocks executed 90%
        -: 1324:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1325:{
        -: 1326:  //Note: supplyPos is enum of choosen card
        -: 1327:	
        -: 1328:  //check if supply pile is empty (0) or card is not used in game (-1)
  3695926: 1329:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1330:    {
    #####: 1331:      return -1;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //added card for [whoseTurn] current player:
        -: 1335:  // toFlag = 0 : add to discard
        -: 1336:  // toFlag = 1 : add to deck
        -: 1337:  // toFlag = 2 : add to hand
        -: 1338:
  3695926: 1339:  if (toFlag == 1)
branch  0 taken 6%
branch  1 taken 94%
        -: 1340:    {
   207420: 1341:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
   207420: 1342:      state->deckCount[player]++;
   207420: 1343:    }
  3488506: 1344:  else if (toFlag == 2)
branch  0 taken 55%
branch  1 taken 45%
        -: 1345:    {
  1915749: 1346:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
  1915749: 1347:      state->handCount[player]++;
  1915749: 1348:    }
        -: 1349:  else
        -: 1350:    {
  1572757: 1351:      state->discard[player][ state->discardCount[player] ] = supplyPos;
  1572757: 1352:      state->discardCount[player]++;
        -: 1353:    }
        -: 1354:	
        -: 1355:  //decrease number in supply pile
  3695926: 1356:  state->supplyCount[supplyPos]--;
        -: 1357:	 
  3695926: 1358:  return 0;
  3695926: 1359:}
        -: 1360:
function updateCoins called 3540366 returned 100% blocks executed 100%
        -: 1361:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1362:{
        -: 1363:  int i;
        -: 1364:	
        -: 1365:  //reset coin count
  3540366: 1366:  state->coins = 0;
        -: 1367:
        -: 1368:  //add coins for each Treasure card in player's hand
 48831250: 1369:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 85%
branch  1 taken 15%
        -: 1370:    {
 20875259: 1371:      if (state->hand[player][i] == copper)
branch  0 taken 31%
branch  1 taken 69%
        -: 1372:	{
  6507399: 1373:	  state->coins += 1;
  6507399: 1374:	}
 14367860: 1375:      else if (state->hand[player][i] == silver)
branch  0 taken 3%
branch  1 taken 97%
        -: 1376:	{
   419639: 1377:	  state->coins += 2;
   419639: 1378:	}
 13948221: 1379:      else if (state->hand[player][i] == gold)
branch  0 taken 3%
branch  1 taken 97%
        -: 1380:	{
   418250: 1381:	  state->coins += 3;
   418250: 1382:	}	
 20875259: 1383:    }	
        -: 1384:
        -: 1385:  //add bonus
  3540366: 1386:  state->coins += bonus;
        -: 1387:
  3540366: 1388:  return 0;
        -: 1389:}
        -: 1390:
        -: 1391:
        -: 1392://end of dominion.c
        -: 1393:
